---
AWSTemplateFormatVersion: '2010-09-09'
Description: Single Sinatra Application in autoscaling 1:1
Parameters:
  AMIID:
    Type: String
    Default: ami-02a599eb01e3b3c5b
  InstanceName:
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - t2.small

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-IGW" ]]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: myPublicSubnet
    Properties:
      AllocationId:
         Fn::GetAtt:
         - EIP
         - AllocationId
      SubnetId:
        Ref: myPublicSubnet
      Tags:
       - Key: Name
         Value: !Join ['', [!Ref "AWS::StackName", "-NATGW" ]]

  EIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  myIGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-RouteTable" ]]

  myNATRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-NATRouteTable" ]]

  myNATRoute:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
       RouteTableId:
         Ref: myNATRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId:
         Ref: NATGateway

  myIGWRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId:
         Ref: myIGWRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: InternetGateway

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: myPrivateSubnet
    Properties:
      SubnetId:
        Ref: myPrivateSubnet
      RouteTableId:
        Ref: myNATRouteTable

  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: myPublicSubnet
    Properties:
      SubnetId:
        Ref: myPublicSubnet
      RouteTableId:
        Ref: myIGWRouteTable

  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: "ap-southeast-2a"
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet" ]]

  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "ap-southeast-2a"
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet" ]]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref myPublicSubnet
      Scheme: internet-facing
      Listeners:
        - InstancePort: 80
          InstanceProtocol: HTTP
          LoadBalancerPort: 80
          Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: myPrivateSubnet
    Properties:
      Tags:
      - Key: Name
        Value:
          !Ref InstanceName
        PropagateAtLaunch: 'true'
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      VPCZoneIdentifier:
        - Ref: myPrivateSubnet
      LoadBalancerNames:
        - !Ref LoadBalancer

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: AMIID
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            apt-get update
            apt-get install --yes awscli
            apt install ruby-bundler -y
            git clone https://github.com/rea-cruitment/simple-sinatra-app.git
            cd simple-sinatra-app
            bundle install
            sudo ruby helloworld.rb -o 0.0.0.0 -p 80

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable HTTP from LBSecurity Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          !Ref LBSecurityGroup

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable HTTP from outside
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

Outputs:
  InstanceSecurityGroup:
    Description: Security group ec2
    Value:
      Fn::GetAtt:
      - InstanceSecurityGroup
      - GroupId
  LoadBalancer:
    Description: DNS entry of ElasticLoadBalancer
    Value:
      Fn::GetAtt:
      - LoadBalancer
      - DNSName
